describe('test examples page', () => {
    beforeEach( () =>{
        cy.visit('/examples')
    })

    it('checks adding grudge', () => {
      cy.get('input[type="text"]').type('This is the first grudge')
      cy.get('button').contains('Add Grudge').click()
      cy.get('li>span').contains('This is the first grudge').should('be.visible')
      cy.get('input[type="text"]').type('This is the second grudge')
      cy.get('button').contains('Add Grudge').click()
      cy.get('li>span').contains('This is the second grudge').should('be.visible')
      cy.get('li>span').contains('This is the first grudge').should('be.visible')
    }) 

    it('checks deleting grudge', () => {
        cy.get('input[type="text"]').type('This is the first grudge')
        cy.get('button').contains('Add Grudge').click()
        cy.get('li>span').contains('This is the first grudge').should('exist')
        cy.get('li>button').contains('X').click()
        cy.get('li>span').should('not.exist')
      }) 

      it('checks deleting more than one grudge', () => {
        cy.get('input[type="text"]').type('This is the first grudge')
        cy.get('button').contains('Add Grudge').as('add_grudge_btn').click()
        cy.get('input[type="text"]').type('This is the second grudge')
        cy.get('@add_grudge_btn').click()
        cy.get('input[type="text"]').type('This is the third grudge')
        cy.get('@add_grudge_btn').click()
        cy.get('ul>li').should('have.length', 3)
        cy.get('li>button').contains('X').click()
        cy.get('ul>li').should('have.length', 2)
        cy.get('li>button').contains('X').click()
        cy.get('ul>li').should('have.length', 1)
        cy.get('li>button').contains('X').click()
        cy.get('ul>li').should('have.length', 0)
      }) 

      it('checks adding and deleting with custom commands', () => {
        cy.addGrudge("This is the first custom grudge")
        cy.addGrudge("This is the second custom grudge")
        cy.addGrudge("This is the third custom grudge")
        cy.get('ul>li').should('have.length', 3)
        cy.deleteGrudge()
        cy.get('ul>li').should('have.length', 2)
        cy.deleteGrudge()
        cy.get('ul>li').should('have.length', 1)
        cy.deleteGrudge()
        cy.get('ul>li').should('have.length', 0)
      }) 

      it('checks accordions with custom command', () => {
        cy.clickAccordion(0)
        cy.get('p').contains("You can quite easily write tests across pages to better test entire user workflows.").should('be.visible')
        cy.clickAccordion(0)
        cy.get('p').contains("You can quite easily write tests across pages to better test entire user workflows.").should('not.be.visible')
        cy.clickAccordion(1)
        cy.get('p').contains("Cypress provides different ways of working with network requests.").should('be.visible')
        cy.clickAccordion(1)
        cy.get('p').contains("Cypress provides different ways of working with network requests.").should('not.be.visible')
        cy.clickAccordion(2)
        cy.get('p').contains("Cypress provides a ton of methods.").should('be.visible')
        cy.clickAccordion(2)
        cy.get('p').contains("Cypress provides a ton of methods.").should('not.be.visible')
        cy.clickAccordion(3)
        cy.get('p').contains("Let's test some actual state changes").should('be.visible')
        cy.clickAccordion(3)
        cy.get('p').contains("Let's test some actual state changes").should('not.be.visible')
      }) 

  })